{- This module was autogenerated. Please don't edit. -}

module MUI.Lab.Alert where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Paper (PaperPropsRow, PaperReqPropsRow) as MUI.Core.Paper
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import React.Basic.Events (EventHandler) as React.Basic.Events
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup::{ 
  dialog :: AriaHaspopup,
  "false" :: AriaHaspopup,
  grid :: AriaHaspopup,
  listbox :: AriaHaspopup,
  menu :: AriaHaspopup,
  tree :: AriaHaspopup,
  "true" :: AriaHaspopup
 }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

foreign import data Color :: Type

color::{ 
  error :: Color,
  info :: Color,
  success :: Color,
  warning :: Color
 }
color = { error: unsafeCoerce "error", info: unsafeCoerce "info", success: unsafeCoerce "success", warning: unsafeCoerce "warning" }

foreign import data Severity :: Type

severity::{ 
  error :: Severity,
  info :: Severity,
  success :: Severity,
  warning :: Severity
 }
severity = { error: unsafeCoerce "error", info: unsafeCoerce "info", success: unsafeCoerce "success", warning: unsafeCoerce "warning" }

foreign import data Variant :: Type

variant::{ 
  filled :: Variant,
  outlined :: Variant,
  standard :: Variant
 }
variant = { filled: unsafeCoerce "filled", outlined: unsafeCoerce "outlined", standard: unsafeCoerce "standard" }

instance eqVariant :: Eq Variant where
  eq = unsafeRefEq

instance eqSeverity :: Eq Severity where
  eq = unsafeRefEq

instance eqColor :: Eq Color where
  eq = unsafeRefEq

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type AlertClassesGenericRow a =
  ( 
    action :: a,
    filledError :: a,
    filledInfo :: a,
    filledSuccess :: a,
    filledWarning :: a,
    icon :: a,
    message :: a,
    outlinedError :: a,
    outlinedInfo :: a,
    outlinedSuccess :: a,
    outlinedWarning :: a,
    root :: a,
    standardError :: a,
    standardInfo :: a,
    standardSuccess :: a,
    standardWarning :: a
   )

type AlertClassesKey  =
  AlertClassesGenericRow String

type AlertClassesJSS  =
  AlertClassesGenericRow JSS

type AlertOptPropsRow (r :: # Type) =
  ( 
    action :: JSX,
    "aria-controls" :: String,
    "aria-haspopup" :: AriaHaspopup,
    children :: Array  JSX,
    classes :: {   | AlertClassesKey  },
    closeText :: String,
    color :: Color,
    icon :: JSX,
    iconMapping :: Foreign.Foreign,
    onClose :: React.Basic.Events.EventHandler,
    role :: String,
    severity :: Severity,
    variant :: Variant
   | r
   )

type AlertReqPropsRow (r :: # Type) =
  r

type AlertPropsRow (r :: # Type) =
  AlertOptPropsRow (AlertReqPropsRow r)

foreign import _UnsafeAlert :: forall componentProps.    ReactComponent {   | AlertPropsRow componentProps  }

_Alert::forall given optionalGiven optionalMissing props required. 
  Nub' (AlertReqPropsRow (MUI.Core.Paper.PaperReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AlertPropsRow (MUI.Core.Paper.PaperPropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent {   | given  }
_Alert = unsafeCoerce _UnsafeAlert

alert::forall given optionalGiven optionalMissing props required. 
  Nub' (AlertReqPropsRow (MUI.Core.Paper.PaperReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AlertPropsRow (MUI.Core.Paper.PaperPropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  {   | given  }  ->  JSX
alert ps = element _Alert ps

alert'::AlertProps  ->  JSX
alert' = MUI.React.Basic.element _Alert'

_Alert'::ReactComponent AlertProps
_Alert' = unsafeCoerce _UnsafeAlert

alertWithStyles::forall jss_ jss. 
  Prim.Row.Union jss jss_ AlertClassesJSS =>
  (MUI.Core.Styles.Theme  ->  {   | jss  })  ->  Effect.Effect (AlertProps  ->  JSX)
alertWithStyles style = render
  where
    withStyles'::ReactComponent AlertProps  ->  Effect.Effect (ReactComponent AlertProps)
    withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)
    styledComponent = withStyles' _Alert'
    render = map MUI.React.Basic.element styledComponent

foreign import data AlertProps :: Type

props::forall given optionalGiven optionalMissing props required. 
  Nub' (AlertReqPropsRow (MUI.Core.Paper.PaperReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AlertPropsRow (MUI.Core.Paper.PaperPropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  {   | given  }  ->  AlertProps
props = unsafeCoerce