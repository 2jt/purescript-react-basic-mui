{- This module was autogenerated. Please don't edit. -}
module MUI.Core.AccordionActions where

import Effect (Effect) as Effect
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type AccordionActionsClassesGenericRow a
  = ( root :: a
    , spacing :: a
    )

type AccordionActionsClassesKey
  = AccordionActionsClassesGenericRow String

type AccordionActionsClassesJSS
  = AccordionActionsClassesGenericRow JSS

type AccordionActionsOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , children :: Array JSX
    , classes :: { | AccordionActionsClassesKey }
    , disableSpacing :: Boolean
    | r
    )

type AccordionActionsReqPropsRow (r :: # Type)
  = r

type AccordionActionsPropsRow (r :: # Type)
  = AccordionActionsOptPropsRow (AccordionActionsReqPropsRow r)

foreign import _UnsafeAccordionActions :: forall componentProps. ReactComponent { | AccordionActionsPropsRow componentProps }

_AccordionActions ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AccordionActionsReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AccordionActionsPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_AccordionActions = unsafeCoerce _UnsafeAccordionActions

accordionActions ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AccordionActionsReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AccordionActionsPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
accordionActions ps = element _AccordionActions ps

accordionActions' :: AccordionActionsProps -> JSX
accordionActions' = MUI.React.Basic.element _AccordionActions'

_AccordionActions' :: ReactComponent AccordionActionsProps
_AccordionActions' = unsafeCoerce _UnsafeAccordionActions

accordionActionsWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ AccordionActionsClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (AccordionActionsProps -> JSX)
accordionActionsWithStyles style = render
  where
  withStyles' :: ReactComponent AccordionActionsProps -> Effect.Effect (ReactComponent AccordionActionsProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _AccordionActions'

  render = map MUI.React.Basic.element styledComponent

foreign import data AccordionActionsProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AccordionActionsReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AccordionActionsPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> AccordionActionsProps
props = unsafeCoerce
