{- This module was autogenerated. Please don't edit. -}
module MUI.Core.AccordionDetails where

import Effect (Effect) as Effect
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type AccordionDetailsClassesGenericRow a
  = ( root :: a
    )

type AccordionDetailsClassesKey
  = AccordionDetailsClassesGenericRow String

type AccordionDetailsClassesJSS
  = AccordionDetailsClassesGenericRow JSS

type AccordionDetailsOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , children :: Array JSX
    , classes :: { | AccordionDetailsClassesKey }
    | r
    )

type AccordionDetailsReqPropsRow (r :: # Type)
  = r

type AccordionDetailsPropsRow (r :: # Type)
  = AccordionDetailsOptPropsRow (AccordionDetailsReqPropsRow r)

foreign import _UnsafeAccordionDetails :: forall componentProps. ReactComponent { | AccordionDetailsPropsRow componentProps }

_AccordionDetails ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AccordionDetailsReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AccordionDetailsPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_AccordionDetails = unsafeCoerce _UnsafeAccordionDetails

accordionDetails ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AccordionDetailsReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AccordionDetailsPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
accordionDetails ps = element _AccordionDetails ps

accordionDetails' :: AccordionDetailsProps -> JSX
accordionDetails' = MUI.React.Basic.element _AccordionDetails'

_AccordionDetails' :: ReactComponent AccordionDetailsProps
_AccordionDetails' = unsafeCoerce _UnsafeAccordionDetails

accordionDetailsWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ AccordionDetailsClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (AccordionDetailsProps -> JSX)
accordionDetailsWithStyles style = render
  where
  withStyles' :: ReactComponent AccordionDetailsProps -> Effect.Effect (ReactComponent AccordionDetailsProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _AccordionDetails'

  render = map MUI.React.Basic.element styledComponent

foreign import data AccordionDetailsProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AccordionDetailsReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AccordionDetailsPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> AccordionDetailsProps
props = unsafeCoerce
