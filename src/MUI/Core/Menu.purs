{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Menu where

import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import React.Basic.Events (EventHandler) as React.Basic.Events
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data TransitionDuration :: Type

transitionDuration ::
  { auto :: TransitionDuration
  , number :: Number -> TransitionDuration
  , record :: { appear :: Number, enter :: Number, exit :: Number } -> TransitionDuration
  , record1 :: { appear :: Number, enter :: Number, exit :: Number } -> TransitionDuration
  }
transitionDuration = { auto: unsafeCoerce "auto", number: unsafeCoerce, record: unsafeCoerce, record1: unsafeCoerce }

foreign import data Variant :: Type

variant ::
  { menu :: Variant
  , selectedMenu :: Variant
  }
variant = { menu: unsafeCoerce "menu", selectedMenu: unsafeCoerce "selectedMenu" }

instance eqVariant :: Eq Variant where
  eq = unsafeRefEq

type MenuClassesGenericRow a
  = ( list :: a
    , paper :: a
    )

type MenuClassesKey
  = MenuClassesGenericRow String

type MenuClassesJSS
  = MenuClassesGenericRow JSS

type MenuOptPropsRow (r :: # Type)
  = ( "MenuListProps" :: Foreign.Foreign
    , "PopoverClasses" :: Foreign.Foreign
    , anchorEl :: Foreign.Foreign
    , autoFocus :: Boolean
    , children :: Array JSX
    , classes :: { | MenuClassesKey }
    , disableAutoFocusItem :: Boolean
    , onClose :: React.Basic.Events.EventHandler
    , onEnter :: React.Basic.Events.EventHandler
    , onEntered :: React.Basic.Events.EventHandler
    , onEntering :: React.Basic.Events.EventHandler
    , onExit :: React.Basic.Events.EventHandler
    , onExited :: React.Basic.Events.EventHandler
    , onExiting :: React.Basic.Events.EventHandler
    , ref :: Foreign.Foreign
    , transitionDuration :: TransitionDuration
    , variant :: Variant
    | r
    )

type MenuReqPropsRow (r :: # Type)
  = ( open :: Boolean
    | r
    )

type MenuPropsRow (r :: # Type)
  = MenuOptPropsRow (MenuReqPropsRow r)

foreign import _UnsafeMenu :: forall componentProps. ReactComponent { | MenuPropsRow componentProps }

_Menu ::
  forall given optionalGiven optionalMissing props required.
  Nub' (MenuReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (MenuPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Menu = unsafeCoerce _UnsafeMenu

menu ::
  forall given optionalGiven optionalMissing props required.
  Nub' (MenuReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (MenuPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
menu props = element _Menu props

menuWithStyles ::
  forall jss_ jss given optionalGiven optionalMissing props required.
  Nub' (MenuReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (MenuPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  Prim.Row.Union jss jss_ MenuClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> { | given } -> JSX
menuWithStyles style props = element (withStyles' style _Menu) props
  where
  withStyles' :: (MUI.Core.Styles.Theme -> { | jss }) -> ReactComponent { | given } -> ReactComponent { | given }
  withStyles' = unsafeCoerce MUI.Core.Styles.withStyles

foreign import data MenuProps :: Type

menuProps ::
  forall given optionalGiven optionalMissing props required.
  Nub' (MenuReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (MenuPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> MenuProps
menuProps = unsafeCoerce
