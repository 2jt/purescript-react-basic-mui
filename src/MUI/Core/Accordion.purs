{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Accordion where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Paper (PaperPropsRow, PaperReqPropsRow) as MUI.Core.Paper
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import React.Basic.Events (EventHandler) as React.Basic.Events
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type AccordionClassesGenericRow a
  = ( disabled :: a
    , expanded :: a
    , root :: a
    , rounded :: a
    )

type AccordionClassesKey
  = AccordionClassesGenericRow String

type AccordionClassesJSS
  = AccordionClassesGenericRow JSS

type AccordionOptPropsRow (r :: # Type)
  = ( "TransitionComponent" :: Foreign.Foreign
    , "TransitionProps" :: Foreign.Foreign
    , "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , classes :: { | AccordionClassesKey }
    , defaultExpanded :: Boolean
    , disabled :: Boolean
    , expanded :: Boolean
    , onChange :: React.Basic.Events.EventHandler
    , square :: Boolean
    | r
    )

type AccordionReqPropsRow (r :: # Type)
  = ( children :: Array JSX
    | r
    )

type AccordionPropsRow (r :: # Type)
  = AccordionOptPropsRow (AccordionReqPropsRow r)

foreign import _UnsafeAccordion :: forall componentProps. ReactComponent { | AccordionPropsRow componentProps }

_Accordion ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AccordionReqPropsRow (MUI.Core.Paper.PaperReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AccordionPropsRow (MUI.Core.Paper.PaperPropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Accordion = unsafeCoerce _UnsafeAccordion

accordion ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AccordionReqPropsRow (MUI.Core.Paper.PaperReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AccordionPropsRow (MUI.Core.Paper.PaperPropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
accordion ps = element _Accordion ps

accordion' :: AccordionProps -> JSX
accordion' = MUI.React.Basic.element _Accordion'

_Accordion' :: ReactComponent AccordionProps
_Accordion' = unsafeCoerce _UnsafeAccordion

accordionWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ AccordionClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (AccordionProps -> JSX)
accordionWithStyles style = render
  where
  withStyles' :: ReactComponent AccordionProps -> Effect.Effect (ReactComponent AccordionProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _Accordion'

  render = map MUI.React.Basic.element styledComponent

foreign import data AccordionProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AccordionReqPropsRow (MUI.Core.Paper.PaperReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AccordionPropsRow (MUI.Core.Paper.PaperPropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> AccordionProps
props = unsafeCoerce
