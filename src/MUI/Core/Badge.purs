{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Badge where

import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data Color :: Type

color ::
  { default :: Color
  , error :: Color
  , primary :: Color
  , secondary :: Color
  }
color = { default: unsafeCoerce "default", error: unsafeCoerce "error", primary: unsafeCoerce "primary", secondary: unsafeCoerce "secondary" }

foreign import data Horizontal :: Type

horizontal ::
  { left :: Horizontal
  , right :: Horizontal
  }
horizontal = { left: unsafeCoerce "left", right: unsafeCoerce "right" }

foreign import data Variant :: Type

variant ::
  { dot :: Variant
  , standard :: Variant
  }
variant = { dot: unsafeCoerce "dot", standard: unsafeCoerce "standard" }

foreign import data Vertical :: Type

vertical ::
  { bottom :: Vertical
  , top :: Vertical
  }
vertical = { bottom: unsafeCoerce "bottom", top: unsafeCoerce "top" }

instance eqVertical :: Eq Vertical where
  eq = unsafeRefEq

instance eqVariant :: Eq Variant where
  eq = unsafeRefEq

instance eqHorizontal :: Eq Horizontal where
  eq = unsafeRefEq

instance eqColor :: Eq Color where
  eq = unsafeRefEq

type BadgeClassesGenericRow a
  = ( anchorOriginBottomLeftRectangle :: a
    , anchorOriginBottomRightCircle :: a
    , anchorOriginBottomRightRectangle :: a
    , anchorOriginTopLeftCircle :: a
    , anchorOriginTopLeftRectangle :: a
    , anchorOriginTopRightCircle :: a
    , anchorOriginTopRightRectangle :: a
    , badge :: a
    , colorError :: a
    , colorPrimary :: a
    , colorSecondary :: a
    , dot :: a
    , invisible :: a
    , root :: a
    )

type BadgeClassesKey
  = BadgeClassesGenericRow String

type BadgeClassesJSS
  = BadgeClassesGenericRow JSS

type BadgeOptPropsRow (r :: #Type)
  = ( anchorOrigin :: { horizontal :: Horizontal, vertical :: Vertical }
    , badgeContent :: JSX
    , children :: Array JSX
    , classes :: { | BadgeClassesKey }
    , color :: Color
    , invisible :: Boolean
    , max :: Number
    , showZero :: Boolean
    , variant :: Variant
    | r
    )

type BadgeReqPropsRow (r :: #Type)
  = r

type BadgePropsRow (r :: #Type)
  = BadgeOptPropsRow (BadgeReqPropsRow r)

foreign import _UnsafeBadge :: forall componentProps. ReactComponent { | BadgePropsRow componentProps }

_Badge ::
  forall given optionalMissing props.
  Nub' (BadgePropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | BadgeReqPropsRow given }
_Badge = unsafeCoerce _UnsafeBadge

badge ::
  forall given optionalMissing props.
  Nub' (BadgePropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | BadgeReqPropsRow given } -> JSX
badge props = element _Badge props

badgeWithStyles ::
  forall jss_ jss given optionalMissing props.
  Nub' (BadgePropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  Prim.Row.Union jss jss_ BadgeClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> { | BadgeReqPropsRow given } -> JSX
badgeWithStyles style props = element (withStyles' style _Badge) props
  where
  withStyles' :: (MUI.Core.Styles.Theme -> { | jss }) -> ReactComponent { | BadgeReqPropsRow given } -> ReactComponent { | BadgeReqPropsRow given }
  withStyles' = unsafeCoerce MUI.Core.Styles.withStyles

foreign import data BadgeProps :: Type

badgeProps ::
  forall given optionalMissing props.
  Nub' (BadgePropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | BadgeReqPropsRow given } -> BadgeProps
badgeProps = unsafeCoerce
