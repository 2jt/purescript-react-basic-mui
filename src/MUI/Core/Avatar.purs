{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Avatar where

import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data Variant :: Type

variant ::
  { circle :: Variant
  , rounded :: Variant
  , square :: Variant
  }
variant = { circle: unsafeCoerce "circle", rounded: unsafeCoerce "rounded", square: unsafeCoerce "square" }

instance eqVariant :: Eq Variant where
  eq = unsafeRefEq

type AvatarClassesGenericRow a
  = ( circle :: a
    , colorDefault :: a
    , fallback :: a
    , img :: a
    , root :: a
    , rounded :: a
    , square :: a
    )

type AvatarClassesKey
  = AvatarClassesGenericRow String

type AvatarClassesJSS
  = AvatarClassesGenericRow JSS

type AvatarOptPropsRow (r :: # Type)
  = ( alt :: String
    , children :: Array JSX
    , classes :: { | AvatarClassesKey }
    , imgProps :: Foreign.Foreign
    , ref :: Foreign.Foreign
    , sizes :: String
    , src :: String
    , srcSet :: String
    , variant :: Variant
    | r
    )

type AvatarReqPropsRow (r :: # Type)
  = r

type AvatarPropsRow (r :: # Type)
  = AvatarOptPropsRow (AvatarReqPropsRow r)

foreign import _UnsafeAvatar :: forall componentProps. ReactComponent { | AvatarPropsRow componentProps }

_Avatar ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AvatarReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AvatarPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Avatar = unsafeCoerce _UnsafeAvatar

avatar ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AvatarReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AvatarPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
avatar props = element _Avatar props

avatarWithStyles ::
  forall jss_ jss given optionalGiven optionalMissing props required.
  Nub' (AvatarReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AvatarPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  Prim.Row.Union jss jss_ AvatarClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> { | given } -> JSX
avatarWithStyles style props = element (withStyles' style _Avatar) props
  where
  withStyles' :: (MUI.Core.Styles.Theme -> { | jss }) -> ReactComponent { | given } -> ReactComponent { | given }
  withStyles' = unsafeCoerce MUI.Core.Styles.withStyles

foreign import data AvatarProps :: Type

avatarProps ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AvatarReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AvatarPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> AvatarProps
avatarProps = unsafeCoerce
