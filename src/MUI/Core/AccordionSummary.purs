{- This module was autogenerated. Please don't edit. -}

module MUI.Core.AccordionSummary where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.ButtonBase (ButtonBasePropsRow, ButtonBaseReqPropsRow) as MUI.Core.ButtonBase
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_button) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup::{ 
  dialog :: AriaHaspopup,
  "false" :: AriaHaspopup,
  grid :: AriaHaspopup,
  listbox :: AriaHaspopup,
  menu :: AriaHaspopup,
  tree :: AriaHaspopup,
  "true" :: AriaHaspopup
 }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type AccordionSummaryClassesGenericRow a =
  ( 
    content :: a,
    disabled :: a,
    expandIcon :: a,
    expanded :: a,
    focused :: a,
    root :: a
   )

type AccordionSummaryClassesKey  =
  AccordionSummaryClassesGenericRow String

type AccordionSummaryClassesJSS  =
  AccordionSummaryClassesGenericRow JSS

type AccordionSummaryOptPropsRow (r :: # Type) =
  ( 
    "IconButtonProps" :: Foreign.Foreign,
    "aria-controls" :: String,
    "aria-haspopup" :: AriaHaspopup,
    children :: Array  JSX,
    classes :: {   | AccordionSummaryClassesKey  },
    expandIcon :: JSX
   | r
   )

type AccordionSummaryReqPropsRow (r :: # Type) =
  r

type AccordionSummaryPropsRow (r :: # Type) =
  AccordionSummaryOptPropsRow (AccordionSummaryReqPropsRow r)

foreign import _UnsafeAccordionSummary :: forall componentProps.    ReactComponent {   | AccordionSummaryPropsRow componentProps  }

_AccordionSummary::forall given optionalGiven optionalMissing props required. 
  Nub' (AccordionSummaryReqPropsRow (MUI.Core.ButtonBase.ButtonBaseReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AccordionSummaryPropsRow (MUI.Core.ButtonBase.ButtonBasePropsRow React.Basic.DOM.Props_button)) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent {   | given  }
_AccordionSummary = unsafeCoerce _UnsafeAccordionSummary

accordionSummary::forall given optionalGiven optionalMissing props required. 
  Nub' (AccordionSummaryReqPropsRow (MUI.Core.ButtonBase.ButtonBaseReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AccordionSummaryPropsRow (MUI.Core.ButtonBase.ButtonBasePropsRow React.Basic.DOM.Props_button)) props =>
  Prim.Row.Union given optionalMissing props =>
  {   | given  }  ->  JSX
accordionSummary ps = element _AccordionSummary ps

accordionSummary'::AccordionSummaryProps  ->  JSX
accordionSummary' = MUI.React.Basic.element _AccordionSummary'

_AccordionSummary'::ReactComponent AccordionSummaryProps
_AccordionSummary' = unsafeCoerce _UnsafeAccordionSummary

accordionSummaryWithStyles::forall jss_ jss. 
  Prim.Row.Union jss jss_ AccordionSummaryClassesJSS =>
  (MUI.Core.Styles.Theme  ->  {   | jss  })  ->  Effect.Effect (AccordionSummaryProps  ->  JSX)
accordionSummaryWithStyles style = render
  where
    withStyles'::ReactComponent AccordionSummaryProps  ->  Effect.Effect (ReactComponent AccordionSummaryProps)
    withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)
    styledComponent = withStyles' _AccordionSummary'
    render = map MUI.React.Basic.element styledComponent

foreign import data AccordionSummaryProps :: Type

props::forall given optionalGiven optionalMissing props required. 
  Nub' (AccordionSummaryReqPropsRow (MUI.Core.ButtonBase.ButtonBaseReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AccordionSummaryPropsRow (MUI.Core.ButtonBase.ButtonBasePropsRow React.Basic.DOM.Props_button)) props =>
  Prim.Row.Union given optionalMissing props =>
  {   | given  }  ->  AccordionSummaryProps
props = unsafeCoerce