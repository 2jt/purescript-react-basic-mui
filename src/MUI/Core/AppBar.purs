{- This module was autogenerated. Please don't edit. -}
module MUI.Core.AppBar where

import MUI.Core (JSS, class Nub')
import MUI.Core.Paper (PaperPropsRow, PaperReqPropsRow) as MUI.Core.Paper
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data Color :: Type

color ::
  { default :: Color
  , inherit :: Color
  , primary :: Color
  , secondary :: Color
  , transparent :: Color
  }
color = { default: unsafeCoerce "default", inherit: unsafeCoerce "inherit", primary: unsafeCoerce "primary", secondary: unsafeCoerce "secondary", transparent: unsafeCoerce "transparent" }

foreign import data Position :: Type

position ::
  { absolute :: Position
  , fixed :: Position
  , relative :: Position
  , static :: Position
  , sticky :: Position
  }
position = { absolute: unsafeCoerce "absolute", fixed: unsafeCoerce "fixed", relative: unsafeCoerce "relative", static: unsafeCoerce "static", sticky: unsafeCoerce "sticky" }

instance eqPosition :: Eq Position where
  eq = unsafeRefEq

instance eqColor :: Eq Color where
  eq = unsafeRefEq

type AppBarClassesGenericRow a
  = ( colorDefault :: a
    , colorPrimary :: a
    , colorSecondary :: a
    , positionAbsolute :: a
    , positionFixed :: a
    , positionRelative :: a
    , positionStatic :: a
    , positionSticky :: a
    , root :: a
    )

type AppBarClassesKey
  = AppBarClassesGenericRow String

type AppBarClassesJSS
  = AppBarClassesGenericRow JSS

type AppBarOptPropsRow (r :: #Type)
  = ( children :: Array JSX
    , classes :: { | AppBarClassesKey }
    , color :: Color
    , position :: Position
    | r
    )

type AppBarReqPropsRow (r :: #Type)
  = r

type AppBarPropsRow (r :: #Type)
  = AppBarOptPropsRow (AppBarReqPropsRow r)

foreign import _UnsafeAppBar :: forall componentProps. ReactComponent { | AppBarPropsRow componentProps }

_AppBar ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AppBarReqPropsRow (MUI.Core.Paper.PaperReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AppBarPropsRow (MUI.Core.Paper.PaperPropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_AppBar = unsafeCoerce _UnsafeAppBar

appBar ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AppBarReqPropsRow (MUI.Core.Paper.PaperReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AppBarPropsRow (MUI.Core.Paper.PaperPropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
appBar props = element _AppBar props

appBarWithStyles ::
  forall jss_ jss given optionalGiven optionalMissing props required.
  Nub' (AppBarReqPropsRow (MUI.Core.Paper.PaperReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AppBarPropsRow (MUI.Core.Paper.PaperPropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  Prim.Row.Union jss jss_ AppBarClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> { | given } -> JSX
appBarWithStyles style props = element (withStyles' style _AppBar) props
  where
  withStyles' :: (MUI.Core.Styles.Theme -> { | jss }) -> ReactComponent { | given } -> ReactComponent { | given }
  withStyles' = unsafeCoerce MUI.Core.Styles.withStyles

foreign import data AppBarProps :: Type

appBarProps ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AppBarReqPropsRow (MUI.Core.Paper.PaperReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AppBarPropsRow (MUI.Core.Paper.PaperPropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> AppBarProps
appBarProps = unsafeCoerce
