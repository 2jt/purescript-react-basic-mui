{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Input where

import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.InputBase (InputBasePropsRow, InputBaseReqPropsRow) as MUI.Core.InputBase
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import React.Basic.Events (EventHandler) as React.Basic.Events
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data Color :: Type

color ::
  { primary :: Color
  , secondary :: Color
  }
color = { primary: unsafeCoerce "primary", secondary: unsafeCoerce "secondary" }

foreign import data Margin :: Type

margin ::
  { dense :: Margin
  , none :: Margin
  }
margin = { dense: unsafeCoerce "dense", none: unsafeCoerce "none" }

foreign import data Rows :: Type

rows ::
  { number :: Number -> Rows
  , string :: String -> Rows
  }
rows = { number: unsafeCoerce, string: unsafeCoerce }

foreign import data RowsMax :: Type

rowsMax ::
  { number :: Number -> RowsMax
  , string :: String -> RowsMax
  }
rowsMax = { number: unsafeCoerce, string: unsafeCoerce }

instance eqMargin :: Eq Margin where
  eq = unsafeRefEq

instance eqColor :: Eq Color where
  eq = unsafeRefEq

type InputClassesGenericRow a
  = ( colorSecondary :: a
    , disabled :: a
    , error :: a
    , focused :: a
    , formControl :: a
    , fullWidth :: a
    , input :: a
    , inputMarginDense :: a
    , inputMultiline :: a
    , inputTypeSearch :: a
    , marginDense :: a
    , multiline :: a
    , root :: a
    , underline :: a
    )

type InputClassesKey
  = InputClassesGenericRow String

type InputClassesJSS
  = InputClassesGenericRow JSS

type InputOptPropsRow (r :: #Type)
  = ( autoComplete :: String
    , autoFocus :: Boolean
    , className :: String
    , classes :: { | InputClassesKey }
    , color :: Color
    , defaultValue :: Foreign.Foreign
    , disabled :: Boolean
    , endAdornment :: JSX
    , error :: Boolean
    , fullWidth :: Boolean
    , id :: String
    , inputProps :: Foreign.Foreign
    , inputRef :: Foreign.Foreign
    , margin :: Margin
    , multiline :: Boolean
    , name :: String
    , onChange :: React.Basic.Events.EventHandler
    , placeholder :: String
    , readOnly :: Boolean
    , required :: Boolean
    , rows :: Rows
    , rowsMax :: RowsMax
    , startAdornment :: JSX
    , "type" :: String
    , value :: Foreign.Foreign
    | r
    )

type InputReqPropsRow (r :: #Type)
  = r

type InputPropsRow (r :: #Type)
  = InputOptPropsRow (InputReqPropsRow r)

foreign import _UnsafeInput :: forall componentProps. ReactComponent { | InputPropsRow componentProps }

_Input ::
  forall given optionalGiven optionalMissing props required.
  Nub' (InputReqPropsRow (MUI.Core.InputBase.InputBaseReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (InputPropsRow (MUI.Core.InputBase.InputBasePropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Input = unsafeCoerce _UnsafeInput

input ::
  forall given optionalGiven optionalMissing props required.
  Nub' (InputReqPropsRow (MUI.Core.InputBase.InputBaseReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (InputPropsRow (MUI.Core.InputBase.InputBasePropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
input props = element _Input props

inputWithStyles ::
  forall jss_ jss given optionalGiven optionalMissing props required.
  Nub' (InputReqPropsRow (MUI.Core.InputBase.InputBaseReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (InputPropsRow (MUI.Core.InputBase.InputBasePropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  Prim.Row.Union jss jss_ InputClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> { | given } -> JSX
inputWithStyles style props = element (withStyles' style _Input) props
  where
  withStyles' :: (MUI.Core.Styles.Theme -> { | jss }) -> ReactComponent { | given } -> ReactComponent { | given }
  withStyles' = unsafeCoerce MUI.Core.Styles.withStyles

foreign import data InputProps :: Type

inputProps ::
  forall given optionalGiven optionalMissing props required.
  Nub' (InputReqPropsRow (MUI.Core.InputBase.InputBaseReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (InputPropsRow (MUI.Core.InputBase.InputBasePropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> InputProps
inputProps = unsafeCoerce
